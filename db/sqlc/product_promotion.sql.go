// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product_promotion.sql

package sqlc

import (
	"context"
)

const createProductPromotion = `-- name: CreateProductPromotion :one
INSERT INTO product_promotions (
  product_id, 
  promotion_id
) VALUES (
  $1, $2
)
RETURNING id, product_id, promotion_id
`

type CreateProductPromotionParams struct {
	ProductID   int64 `json:"product_id"`
	PromotionID int64 `json:"promotion_id"`
}

func (q *Queries) CreateProductPromotion(ctx context.Context, arg CreateProductPromotionParams) (ProductPromotion, error) {
	row := q.db.QueryRowContext(ctx, createProductPromotion, arg.ProductID, arg.PromotionID)
	var i ProductPromotion
	err := row.Scan(&i.ID, &i.ProductID, &i.PromotionID)
	return i, err
}

const deleteProductPromotion = `-- name: DeleteProductPromotion :exec
DELETE FROM product_promotions 
WHERE id = $1
`

func (q *Queries) DeleteProductPromotion(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProductPromotion, id)
	return err
}

const getProductPromotionByID = `-- name: GetProductPromotionByID :one
SELECT id, product_id, promotion_id FROM product_promotions 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductPromotionByID(ctx context.Context, id int64) (ProductPromotion, error) {
	row := q.db.QueryRowContext(ctx, getProductPromotionByID, id)
	var i ProductPromotion
	err := row.Scan(&i.ID, &i.ProductID, &i.PromotionID)
	return i, err
}

const listProductPromotions = `-- name: ListProductPromotions :many
SELECT id, product_id, promotion_id FROM product_promotions 
WHERE product_id = $1
ORDER BY id
`

func (q *Queries) ListProductPromotions(ctx context.Context, productID int64) ([]ProductPromotion, error) {
	rows, err := q.db.QueryContext(ctx, listProductPromotions, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductPromotion{}
	for rows.Next() {
		var i ProductPromotion
		if err := rows.Scan(&i.ID, &i.ProductID, &i.PromotionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
