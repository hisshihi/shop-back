// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package sqlc

import (
	"context"
)

const bannedUser = `-- name: BannedUser :one
UPDATE users
SET is_banned = true 
WHERE id = $1
RETURNING id, username, email, fullname, password, role, phone, is_banned, bonus_points, created_at, updated_at
`

func (q *Queries) BannedUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, bannedUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Fullname,
		&i.Password,
		&i.Role,
		&i.Phone,
		&i.IsBanned,
		&i.BonusPoints,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, 
  email, 
  fullname,
  password, 
  role,
  phone
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, username, email, fullname, password, role, phone, is_banned, bonus_points, created_at, updated_at
`

type CreateUserParams struct {
	Username string   `json:"username"`
	Email    string   `json:"email"`
	Fullname string   `json:"fullname"`
	Password string   `json:"password"`
	Role     UserRole `json:"role"`
	Phone    string   `json:"phone"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Fullname,
		arg.Password,
		arg.Role,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Fullname,
		&i.Password,
		&i.Role,
		&i.Phone,
		&i.IsBanned,
		&i.BonusPoints,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users 
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, fullname, password, role, phone, is_banned, bonus_points, created_at, updated_at FROM users
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Fullname,
		&i.Password,
		&i.Role,
		&i.Phone,
		&i.IsBanned,
		&i.BonusPoints,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, fullname, password, role, phone, is_banned, bonus_points, created_at, updated_at FROM users 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Fullname,
		&i.Password,
		&i.Role,
		&i.Phone,
		&i.IsBanned,
		&i.BonusPoints,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, fullname, password, role, phone, is_banned, bonus_points, created_at, updated_at FROM users 
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Fullname,
			&i.Password,
			&i.Role,
			&i.Phone,
			&i.IsBanned,
			&i.BonusPoints,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET
password = $2
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.ID, arg.Password)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
  username = $2,
  email = $3,
  fullname = $4,
  phone = $5,
  updated_at = NOW()
WHERE id = $1
RETURNING id, username, email, fullname, password, role, phone, is_banned, bonus_points, created_at, updated_at
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Fullname string `json:"fullname"`
	Phone    string `json:"phone"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Fullname,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Fullname,
		&i.Password,
		&i.Role,
		&i.Phone,
		&i.IsBanned,
		&i.BonusPoints,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
