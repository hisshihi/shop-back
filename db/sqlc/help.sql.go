// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: help.sql

package sqlc

import (
	"context"
)

const createHelpMessage = `-- name: CreateHelpMessage :one
INSERT INTO help (
 email,
  topic,
message
) VALUES (
$1, $2, $3
  )
RETURNING id, email, topic, message, created_at
`

type CreateHelpMessageParams struct {
	Email   string `json:"email"`
	Topic   string `json:"topic"`
	Message string `json:"message"`
}

func (q *Queries) CreateHelpMessage(ctx context.Context, arg CreateHelpMessageParams) (Help, error) {
	row := q.db.QueryRowContext(ctx, createHelpMessage, arg.Email, arg.Topic, arg.Message)
	var i Help
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Topic,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const listHelpMesage = `-- name: ListHelpMesage :many
SELECT id, email, topic, message, created_at FROM help
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type ListHelpMesageParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListHelpMesage(ctx context.Context, arg ListHelpMesageParams) ([]Help, error) {
	rows, err := q.db.QueryContext(ctx, listHelpMesage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Help{}
	for rows.Next() {
		var i Help
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Topic,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
