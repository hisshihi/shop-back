// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package sqlc

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  user_id, 
  total_amount, 
  status, 
  payment_method, 
  delivery_status
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, total_amount, status, payment_method, delivery_status, created_at, updated_at
`

type CreateOrderParams struct {
	UserID         int64           `json:"user_id"`
	TotalAmount    string          `json:"total_amount"`
	Status         string          `json:"status"`
	PaymentMethod  string          `json:"payment_method"`
	DeliveryStatus NullOrderStatus `json:"delivery_status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.UserID,
		arg.TotalAmount,
		arg.Status,
		arg.PaymentMethod,
		arg.DeliveryStatus,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
		&i.DeliveryStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders 
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, total_amount, status, payment_method, delivery_status, created_at, updated_at FROM orders 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrderByID(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
		&i.DeliveryStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, user_id, total_amount, status, payment_method, delivery_status, created_at, updated_at FROM orders 
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOrdersParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TotalAmount,
			&i.Status,
			&i.PaymentMethod,
			&i.DeliveryStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET 
  status = $2,
  delivery_status = $3,
  updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, total_amount, status, payment_method, delivery_status, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	ID             int64           `json:"id"`
	Status         string          `json:"status"`
	DeliveryStatus NullOrderStatus `json:"delivery_status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderStatus, arg.ID, arg.Status, arg.DeliveryStatus)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
		&i.DeliveryStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
