// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: promotion.sql

package sqlc

import (
	"context"
	"time"
)

const createPromotion = `-- name: CreatePromotion :one
INSERT INTO promotions (
  name, 
  discount_percentage, 
  start_date, 
  end_date
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, discount_percentage, start_date, end_date
`

type CreatePromotionParams struct {
	Name               string    `json:"name"`
	DiscountPercentage string    `json:"discount_percentage"`
	StartDate          time.Time `json:"start_date"`
	EndDate            time.Time `json:"end_date"`
}

func (q *Queries) CreatePromotion(ctx context.Context, arg CreatePromotionParams) (Promotion, error) {
	row := q.db.QueryRowContext(ctx, createPromotion,
		arg.Name,
		arg.DiscountPercentage,
		arg.StartDate,
		arg.EndDate,
	)
	var i Promotion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DiscountPercentage,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const deletePromotion = `-- name: DeletePromotion :exec
DELETE FROM promotions 
WHERE id = $1
`

func (q *Queries) DeletePromotion(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePromotion, id)
	return err
}

const getPromotionByID = `-- name: GetPromotionByID :one
SELECT id, name, discount_percentage, start_date, end_date FROM promotions 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPromotionByID(ctx context.Context, id int64) (Promotion, error) {
	row := q.db.QueryRowContext(ctx, getPromotionByID, id)
	var i Promotion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DiscountPercentage,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const listPromotions = `-- name: ListPromotions :many
SELECT id, name, discount_percentage, start_date, end_date FROM promotions 
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPromotionsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListPromotions(ctx context.Context, arg ListPromotionsParams) ([]Promotion, error) {
	rows, err := q.db.QueryContext(ctx, listPromotions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Promotion{}
	for rows.Next() {
		var i Promotion
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DiscountPercentage,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePromotion = `-- name: UpdatePromotion :one
UPDATE promotions
SET 
  name = $2,
  discount_percentage = $3,
  start_date = $4,
  end_date = $5
WHERE id = $1
RETURNING id, name, discount_percentage, start_date, end_date
`

type UpdatePromotionParams struct {
	ID                 int64     `json:"id"`
	Name               string    `json:"name"`
	DiscountPercentage string    `json:"discount_percentage"`
	StartDate          time.Time `json:"start_date"`
	EndDate            time.Time `json:"end_date"`
}

func (q *Queries) UpdatePromotion(ctx context.Context, arg UpdatePromotionParams) (Promotion, error) {
	row := q.db.QueryRowContext(ctx, updatePromotion,
		arg.ID,
		arg.Name,
		arg.DiscountPercentage,
		arg.StartDate,
		arg.EndDate,
	)
	var i Promotion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DiscountPercentage,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}
