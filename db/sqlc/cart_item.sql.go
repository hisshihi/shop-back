// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cart_item.sql

package sqlc

import (
	"context"
	"time"
)

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO cart_items (
  user_id,
  product_id,
  quantity
) VALUES (
  $1, $2, $3
  )
RETURNING id, user_id, product_id, quantity, created_at, updated_at
`

type CreateCartItemParams struct {
	UserID    int64 `json:"user_id"`
	ProductID int64 `json:"product_id"`
	Quantity  int32 `json:"quantity"`
}

func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, createCartItem, arg.UserID, arg.ProductID, arg.Quantity)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCartItemByIDAndUserID = `-- name: DeleteCartItemByIDAndUserID :exec
DELETE FROM cart_items
WHERE id = $1 AND user_id = $2
`

type DeleteCartItemByIDAndUserIDParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteCartItemByIDAndUserID(ctx context.Context, arg DeleteCartItemByIDAndUserIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteCartItemByIDAndUserID, arg.ID, arg.UserID)
	return err
}

const getCartItemByID = `-- name: GetCartItemByID :one
SELECT id, user_id, product_id, quantity, created_at, updated_at FROM cart_items
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCartItemByID(ctx context.Context, id int64) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, getCartItemByID, id)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCartItemByUserID = `-- name: ListCartItemByUserID :many
SELECT
  cart_items.id, cart_items.user_id, cart_items.product_id, cart_items.quantity, cart_items.created_at, cart_items.updated_at,
  products.name,
  products.price,
  products.description,
  products.stock,
  products.photo_url
  FROM cart_items
JOIN products ON cart_items.product_id = products.id
WHERE cart_items.user_id = $1
`

type ListCartItemByUserIDRow struct {
	ID          int64     `json:"id"`
	UserID      int64     `json:"user_id"`
	ProductID   int64     `json:"product_id"`
	Quantity    int32     `json:"quantity"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	Name        string    `json:"name"`
	Price       string    `json:"price"`
	Description string    `json:"description"`
	Stock       int32     `json:"stock"`
	PhotoUrl    []byte    `json:"photo_url"`
}

func (q *Queries) ListCartItemByUserID(ctx context.Context, userID int64) ([]ListCartItemByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listCartItemByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCartItemByUserIDRow{}
	for rows.Next() {
		var i ListCartItemByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Price,
			&i.Description,
			&i.Stock,
			&i.PhotoUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
